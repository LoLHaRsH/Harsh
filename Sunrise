#include <graphics.h>
#include <conio.h>
#include <cmath> #include <iostream> using namespace std;
// Base class for Ball class Ball { protected: int x, y, radius;
public:
Ball(int xPos, int yPos, int r) : x(xPos), y(yPos), radius(r) {} virtual void draw() = 0; // Pure virtual function for drawing the ball
virtual void updatePosition(int t) = 0; // Pure virtual function to update the position
};
// Derived class for SineWaveBall class SineWaveBall : public Ball { private:
float amplitude; float frequency;
public:
SineWaveBall(int xPos, int yPos, int r, float amp, float freq) : Ball(xPos, yPos, r), amplitude(amp), frequency(freq) {}
void draw() override { setcolor(RED); circle(x, y, radius); floodfill(x, y, RED);
}
void updatePosition(int t) override { y = static_cast<int>(200 + amplitude * sin(frequency * t)); // Sine wave calculation x += 2; // Move the ball horizontally if (x > 640) { // Reset position when it moves out of bounds
x = 0;
}
}
};
void displayWave() {
for (int i = 0; i < 640; i++) { int y = static_cast<int>(200 + 50 * sin(0.02 * i)); // Sine wave line putpixel(i, y, WHITE);
}
}
int main() {
int gd = DETECT, gm;
initgraph(&gd, &gm, (char *)"");
SineWaveBall ball(0, 200, 10, 50, 0.02); // Create a sine wave ball
int t = 0; while (!kbhit()) { // Loop until a key is pressed
cleardevice(); displayWave(); // Draw the sine wave ball.updatePosition(t); // Update the ball's position ball.draw(); // Draw the ball delay(30); // Control the speed of animation t++;
}
getch(); closegraph(); return 0;
}
