#include<iostream>
#include<graphics.h>
#include<cmath>
#include<iomanip>
using namespace std;

void DDA(int x1, int y1, int x2, int y2, int color)
{
	int dx=x2-x1;
	int dy=y2-y1;
	int len;
	
	if(abs(dx)>abs(dy))
	{
		len=abs(dx);
	}
	else
	{
		len=abs(dy);
	}
	
	float xinc=dx/(float)len;
	float yinc=dy/(float)len;
	float x=x1;
	float y=y1;
	
	for(int i=0; i<=len; i++)
	{
		putpixel(x,y,color);
		x=x+xinc;
		y=y+yinc;
	}
}

int main()
{
	initwindow(800,800,"Transformation");
	setbkcolor(WHITE);
	cleardevice();
	
	float A1[4][3]; //Original matrix
	float A2[3][3]; //Scaling matrix
	float A3[3][3]; //Translation matrix
	float A4[3][3]; //Rotation matrix
	float R[4][3]; //Resultant matrix
	int xe,ye,choice;
	
	cout<<"Enter the co-ordinates of the vertex (x,y) one by one:"<<endl;
	for(int i=0;i<4;i++)
	{
		cout<<"vertex "<<i+1<<" is: ";
		cin>>A1[i][0]>>A1[i][1];
	}
	
	for(int i=0;i<4;i++)
	{
		A1[i][2]=1;
	}
	
	//Menu
	
	do
	{
		cout<<endl;
		cout<<"Transformation Menu"<<endl;
		cout<<"1.Scaling"<<endl;
		cout<<"2.Translation"<<endl;
		cout<<"3.Rotation"<<endl;
		cout<<"4.Exit"<<endl;
		cout<<"Enter your choice: ";
		cin>>choice;
		
		switch(choice)
		{
			case 1://Scaling
				int sx,sy;
				cout<<"Enter scaling factors in x direction: ";
				cin>>sx;
				cout<<"Enter scaling factor in y direction: ";
				cin>>sy;
	
				A2[0][0]=sx;
				A2[1][1]=sy;
				A2[2][2]=1;
	
				for(int i=0;i<3;i++)
				{
					for(int j=0;j<3;j++)
					{
						if(i!=j)
						{
							A2[i][j]=0;
						}
					}
				}
	
				for(int i=0;i<4;i++)
				{
					for(int j=0;j<3;j++)
					{
						R[i][j]=0;
						for(int k=0;k<3;k++)
						{
							R[i][j]=R[i][j]+(A1[i][k]*A2[k][j]);
						}
					}
				}
	
				cleardevice();
	
				//original shape
				DDA(A1[0][0],A1[0][1],A1[1][0],A1[1][1],0);
				DDA(A1[1][0],A1[1][1],A1[2][0],A1[2][1],0);
				DDA(A1[2][0],A1[2][1],A1[3][0],A1[3][1],0);
				DDA(A1[3][0],A1[3][1],A1[0][0],A1[0][1],0);
	
	
				//Scaled Shape
				DDA(R[0][0], R[0][1], R[1][0], R[1][1],4);
    			DDA(R[1][0], R[1][1], R[2][0], R[2][1],4);
    			DDA(R[2][0], R[2][1], R[3][0], R[3][1],4);
    			DDA(R[3][0], R[3][1], R[0][0], R[0][1],4);
    
    			cout<<"Original matrix:"<<endl;
    			for(int i=0;i<4;i++)
    			{
    				for(int j=0;j<3;j++)
    				{
    					cout<<A1[i][j]<<" ";
					}
					cout<<endl;
				}
				cout<<"Scaling matrix:"<<endl;
				for(int i=0;i,3;i++)
				{
					for(int j=0;j<3;j++)
					{
						cout<<A2[i][j]<<" ";
					}
					cout<<endl;
				}
				cout<<"Resultant matrix:"<<endl;
				for(int i=0;i<4;i++)
				{
					for(int j=0;j<3;j++)
					{
						cout<<R[i][j]<<" ";
					}
					cout<<endl;
				}
			break;
			
			case 2:
				//Translation
				int tx,ty;
				cout<<"Enter translation factor in x direction: ";
				cin>>tx;
				cout<<"Enter translation factor in y direction: ";
				cin>>ty;
				
				for(int i=0;i<3;i++)
				{
					for(int j=0;j<3;j++)
					{
						A3[i][j]=0;
					}
				}
				A3[0][0]=A3[1][1]=A3[2][2]=1;
				A3[2][0]=tx;
				A3[2][1]=ty;
				
				for(int i=0;i,4;i++)
				{
					for(int j=0;j,3;j++)
					{
						R[i][j]=0;
						
						for(int k=0;k<3;k++)
						{
							R[i][j]=R[i][j]+(A1[i][k]*A3[k][j]);
						}
					}
				}
				
				cleardevice();
				
				// original shape
                DDA(A1[0][0], A1[0][1], A1[1][0], A1[1][1],0);
                DDA(A1[1][0], A1[1][1], A1[2][0], A1[2][1],0);
                DDA(A1[2][0], A1[2][1], A1[3][0], A1[3][1],0);
                DDA(A1[3][0], A1[3][1], A1[0][0], A1[0][1],0);
                // translated shape
                DDA(R[0][0], R[0][1], R[1][0], R[1][1],4);
                DDA(R[1][0], R[1][1], R[2][0], R[2][1],4);
                DDA(R[2][0], R[2][1], R[3][0], R[3][1],4);
                DDA(R[3][0], R[3][1], R[0][0], R[0][1],4);
                
                cout<<"Original matrix:"<<endl; 
                for(int i=0; i<4; i++)
				{
                	for(int j=0;j<3; j++)
					{
                		cout<<A1[i][j]<<" ";
		            }
					cout<<endl;
				}
				cout<<"Translation matrix:"<<endl;
				for(int i=0; i<3; i++)
				{
		            for(int j=0;j<3; j++)
					{
					    cout<<A3[i][j]<<" ";
		            }
		            cout<<endl;
	            }
	            cout<<"Resultant matrix:"<<endl;
	            for(int i=0; i<4; i++)
				{
				    for(int j=0;j<3; j++)
					{
    		            cout<<R[i][j]<<" ";
		            }
		        cout<<endl;
	            }
                break;
                
                case 3:
                	// Rotation
                	float angle, radian;
					int direction;
                	cout<<"Enter rotation angle in degrees: ";
                	cin>>angle;
                	cout<<"1. Clockwise\n2. Anticlockwise\n";
                	cout<<"Enter rotation direction: ";
                	cin>>direction;

                	radian=angle*3.14159/180;

                	if (direction==1) 
					{
                    	A4[0][0]=cos(radian);
                    	A4[0][1]=sin(radian);
                    	A4[1][0]=-sin(radian);
                    	A4[1][1]=cos(radian);
                	} 
					else if (direction==2) 
					{
                    	A4[0][0]=cos(radian);
                    	A4[0][1]=-sin(radian);
                    	A4[1][0]=sin(radian);
                    	A4[1][1]=cos(radian);
                	} 
					else 
					{
                    	cout<<"Invalid input for rotation direction!"<<endl;
                    	break;
                	}

                	A4[2][2]=1;
                	A4[0][2]=A4[1][2]=A4[2][0]=A4[2][1]=0;

                	for(int i=0; i<4; i++) 
					{
                    	for(int j=0; j<3; j++) 
						{
                        	R[i][j]=0;
                        	for(int k=0; k<3; k++) 
							{
                            	R[i][j]+=A1[i][k]*A4[k][j];
                        	}
                    	}
                	}

                	cleardevice();
                
					cout << fixed << setprecision(2);
                	cout<<"Original matrix:"<<endl; 
                	for(int i=0; i<4; i++)
					{
                		for(int j=0; j<3; j++)
						{
                			cout<<A1[i][j]<<" ";
		            	}
						cout<<endl;
					}
					cout<<"Rotation matrix:"<<endl;
					for(int i=0; i<3; i++)
					{
		            	for(int j=0;j<3; j++)
						{
							cout<<A4[i][j]<<" ";	
		            	}
		            	cout<<endl;
	            	}
	            	cout<<"resultant matrix:"<<endl;
	            	for(int i=0; i<4; i++)
					{
				    	for(int j=0;j<3; j++)
						{	
					    	cout<<R[i][j]<<" ";
		            	}
		        		cout<<endl;
	            	}
	          
                	// original shape
                	DDA(A1[0][0], A1[0][1], A1[1][0], A1[1][1],0);
                	DDA(A1[1][0], A1[1][1], A1[2][0], A1[2][1],0);
                	DDA(A1[2][0], A1[2][1], A1[3][0], A1[3][1],0);
                	DDA(A1[3][0], A1[3][1], A1[0][0], A1[0][1],0);
                	// rotated shape (after translation)
                	DDA(R[0][0] + getmaxx() / 2, R[0][1] + getmaxy() / 2,
                	R[1][0] + getmaxx() / 2, R[1][1] + getmaxy() / 2,4);
                	DDA(R[1][0] + getmaxx() / 2, R[1][1] + getmaxy() / 2,
                	R[2][0] + getmaxx() / 2, R[2][1] + getmaxy() / 2,4);
                	DDA(R[2][0] + getmaxx() / 2, R[2][1] + getmaxy() / 2,
                	R[3][0] + getmaxx() / 2, R[3][1] + getmaxy() / 2,4);
                	DDA(R[3][0] + getmaxx() / 2, R[3][1] + getmaxy() / 2,
                	R[0][0] + getmaxx() / 2, R[0][1] + getmaxy() / 2,4);

                break;

            case 4:
                closegraph();
                return 0;

            default:
                cout<<"Invalid choice! Please enter again."<<endl;
        }
	}while (choice!=4);
	
	//closegraph();
	return 0;
}
